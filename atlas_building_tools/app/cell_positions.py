'''Generate 3D cell positions for the whole mouse brain.

 Cell positions of the form (x, y, z) in the annotated volume space are generated by means of
 an acceptance-rejection method (see https://en.wikipedia.org/wiki/Rejection_sampling) based on
 prescribed cell densities.

 The algorithm is described in the section "Computing Cell Positions" of
 "A Cell Atlas for the Mouse Brain" by C. Eroe et al. (2018),
 https://www.frontiersin.org/articles/10.3389/fninf.2018.00084/full.

 Lexicon:
    for a given cell type:
        - cell density value: the number of cells per voxel (non-negative float)
        - density field or density volume: a 3D float array assigning to each voxel of the
        brain model a cell density value
'''
import logging
from typing import List
import yaml
import click

from nptyping import NDArray  # type: ignore
import numpy as np  # type: ignore
import h5py  # type: ignore

import voxcell  # type: ignore

from atlas_building_tools.exceptions import AtlasBuildingToolsError
from atlas_building_tools.cell_positions import generate_cell_positions

from atlas_building_tools.app.utils import log_args, EXISTING_FILE_PATH

L = logging.getLogger(__name__)


@click.command()
@click.option(
    '--annotation-path',
    type=EXISTING_FILE_PATH,
    required=True,
    help='Path to the whole mouse brain annotation file.',
)
@click.option(
    '--config',
    type=EXISTING_FILE_PATH,
    required=True,
    help=(
        'Path to the densities configuration file.'
        ' This is a yaml file indicating which cell densities are used to generate cell positions.'
        ' It contains the paths to the density volumes.'
    ),
)
@click.option(
    '--output-path',
    type=str,
    required=True,
    help='Path where to write the cell positions (h5 file).',
)
@log_args(L)
def cmd(annotation_path, config, output_path):
    '''Generate 3D cell positions for the whole mouse brain.\n

    Cell positions of the form (x, y, z) are generated by means of an acceptance-rejection method
     based on prescribed cell densities.\n

    The output is an h5 file containing a single dataset named 'positions', a float32 array of shape
     (N, 3) where N is the total number of cells in the mouse brain.\n

    The output 3D coordinates are expressed within the 3D orthonormal frame associated with the
     annotated volume. Hence coordinates take the voxel dimensions and the offset of the annotated
     volume into account. The voxel dimensions and the offsets of the input density files
     specified in `config` are assumed to coincide with the voxel dimensions and the offset of
     the annotated volume.\n

    The algorithm is described in the section "Computing Cell Positions" of
    "A Cell Atlas for the Mouse Brain" by C. Eroe et al. (2018),
    https://www.frontiersin.org/articles/10.3389/fninf.2018.00084/full.
    '''
    config = yaml.load(open(config), Loader=yaml.FullLoader)
    positions: List[NDArray[np.float32]] = []
    annotation = voxcell.VoxelData.load_nrrd(annotation_path)
    annotation_indices = np.array(np.nonzero(annotation.raw)).T
    for (_, path) in config['inputDensityVolumePath'].items():
        voxel_data = voxcell.VoxelData.load_nrrd(path)
        if np.any(voxel_data.offset != annotation.offset):
            raise AtlasBuildingToolsError(
                f'The input density file {path} and the input annotation file {annotation_path} '
                f'have different offsets: {voxel_data.offset} != {annotation.offset}'
            )
        if np.any(voxel_data.voxel_dimensions != annotation.voxel_dimensions):
            raise AtlasBuildingToolsError(
                f'The input density file {path} and the input annotation file {annotation_path} '
                'have different voxel dimensions: '
                f'{voxel_data.voxel_dimensions} != {annotation.voxel_dimensions}'
            )

        positions.append(generate_cell_positions(annotation_indices, voxel_data))

    with h5py.File(output_path, 'w') as output_file:
        data_set = output_file.create_dataset(
            name='positions', data=np.concatenate(positions)
        )
        data_set.attrs['description'] = (
            '1D array of cell positions of the form [x, y, z] in annotation space. '
            ' 3D coordinates are float32.'
        )
